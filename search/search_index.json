{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Shield OAuth Documentation","text":"<p><code>Shield OAuth</code> helps you to provide the possibility of login or registering users through the OAuth service. Currently, <code>Shield OAuth</code> supports <code>Google OAuth</code> and <code>GitHub OAuth</code> by default, but it allows you to implement it for any other service, including Yahoo, Facebook, Twitter, LinkedIn, GitLab and ..., this is very easy. Just create a class in route <code>app\\Libraries\\ShieldOAuth</code>!  more info see How to add other services.</p>"},{"location":"#links","title":"Links:","text":"<ul> <li>Installation Guide</li> <li>How To Get Keys</li> <li>How to add other services</li> <li>Quick Start</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Every open-source project depends on it's contributors to be a success. The following users have contributed in one manner or another in making <code>Shield OAuth</code>:</p> <p> </p>"},{"location":"add_other_oauth/","title":"Adding New OAuth To Shield OAuth","text":"<p>Shield OAuth supports Google OAuth and GitHub OAuth out-of-the-box and also provides an easy way to connect any server that offers OAuth to it. This guide explains how to achieve this.</p> <ul> <li>Adding New OAuth To Shield OAuth</li> <li>Setup Instruction<ul> <li>Command Setup</li> <li>Manual Setup</li> </ul> </li> <li>Available Methods</li> <li>YahooOAuth Example Class</li> </ul>"},{"location":"add_other_oauth/#setup-instruction","title":"Setup Instruction","text":""},{"location":"add_other_oauth/#command-setup","title":"Command Setup","text":"<ol> <li>Run the following command. This command handles steps 1 - 3 of Manual Setup.</li> </ol> <pre><code>php spark make:oauth Example\n</code></pre> <p>Note The name of the new OAuth you want to create doesn't need to contain the <code>OAuth</code> suffix. The command will automatically add it to the class name for you.</p> <p>This command will automatically generate new files ExampleOAuth.php, ShieldOAuthLang.php in the app/Libraries/ShieldOAuth, app/Language/en paths respectively and also update the ShieldOAuthConfig.php file in the app/Config path.</p> <p>Note The ShieldOAuthConfig.php file must be present in your app/Config path for this command to run successfully. So ensure that you have run the <code>make:oauthconfig</code> command first, as stated here.</p> <ol> <li>Configure the files.</li> </ol> <pre><code>// updated file - app/Config/ShieldOAuthConfig.php\n&lt;?php \npublic array $oauthConfigs = [\n    // ..\n    'example' =&gt; [\n        'client_id'     =&gt; 'Get this from the OAuth server',\n        'client_secret' =&gt; 'Get this from the OAuth server',\n\n        'allow_login'    =&gt; true,\n        'allow_register' =&gt; true,\n    ],\n];\n</code></pre> <pre><code>// new file - app/Libraries/ShieldOAuth/ExampleOAuth.php\n&lt;?php \n\ndeclare(strict_types=1);\n\nnamespace App\\Libraries\\ShieldOAuth;\n\nuse Datamweb\\ShieldOAuth\\Libraries\\Basic\\AbstractOAuth;\n\nclass ExampleOAuth extends AbstractOAuth \n{\n    private static $API_CODE_URL = '';\n    private static $API_TOKEN_URL = '';\n    private static $API_USER_INFO_URL = '';\n    private static $APPLICATION_NAME = 'ShieldOAuth';\n\n    protected string $token;\n    protected string $client_id;\n    protected string $client_secret;\n    protected string $callback_url;\n\n    public function __construct(string $token = '')\n    {\n        // your code here\n    }\n\n    public function makeGoLink(string $state): string\n    {\n        // your code here\n        return '';\n    }\n\n    public function fetchAccessTokenWithAuthCode(array $allGet): void\n    {\n        // your code here\n    }\n\n    public function fetchUserInfoWithToken(): object\n    {\n        // your code here\n        return json_decode('');\n    }\n\n    public function setColumnsName(string $nameOfProcess, object $userInfo): array\n    {\n        // your code here\n        return [];\n    }\n}\n</code></pre> <p>See YahooOAuth example for full code.</p>"},{"location":"add_other_oauth/#manual-setup","title":"Manual Setup","text":"<ol> <li>Create a file ExampleOAuth in the app/Libraries/ShieldOAuth path with the following contents. The OAuth suffix is mandatory in creating each new class. For example, if you want to add Yahoo, you should create a file named YahooOAuth.</li> </ol> <pre><code>&lt;?php \n\ndeclare(strict_types=1);\n\nnamespace App\\Libraries\\ShieldOAuth;\n\nuse Datamweb\\ShieldOAuth\\Libraries\\Basic\\AbstractOAuth;\n\nclass ExampleOAuth extends AbstractOAuth \n{\n    private static $API_CODE_URL = '';\n    private static $API_TOKEN_URL = '';\n    private static $API_USER_INFO_URL = '';\n    private static $APPLICATION_NAME = 'ShieldOAuth';\n\n    protected string $token;\n    protected string $client_id;\n    protected string $client_secret;\n    protected string $callback_url;\n\n    public function __construct(string $token = '')\n    {\n        // your code here\n    }\n\n    public function makeGoLink(string $state): string\n    {\n        // your code here\n        return '';\n    }\n\n    public function fetchAccessTokenWithAuthCode(array $allGet): void\n    {\n        // your code here\n    }\n\n    public function fetchUserInfoWithToken(): object\n    {\n        // your code here\n        return json_decode('');\n    }\n\n    public function setColumnsName(string $nameOfProcess, object $userInfo): array\n    {\n        // your code here\n        return [];\n    }\n}\n</code></pre> <p>See YahooOAuth example for full code.</p> <ol> <li>Config Setup Add the new OAuth config keys to the app/Config/ShieldOAuthConfig.php file.</li> </ol> <pre><code>&lt;?php \npublic array $oauthConfigs = [\n    //...\n    'example' =&gt; [\n        'client_id'     =&gt; 'Get this from the OAuth server',\n        'client_secret' =&gt; 'Get this from the OAuth server',\n\n        'allow_login'    =&gt; true,\n        'allow_register' =&gt; true,\n    ],\n    //...\n];\n</code></pre> <ol> <li>Language setup Add the following values to the app/Language/en/ShieldOAuthLang.php file. Create the file if it doesn't exist.</li> </ol> <pre><code>return [\n    // ...\n    'Example' =&gt; [\n        'not_allow' =&gt; 'Now you can\\'t login or register with Example!',\n        'example'   =&gt; 'Example',\n    ],\n    // ...\n];\n</code></pre> <ol> <li>Translations Depending on the requirements of your application, you can translate the language file using the same keys, in as many languages as possible. See CodeIgniter docs for more information. Also note that the file name for each language must be ShieldOAuthLang.php.</li> </ol>"},{"location":"add_other_oauth/#available-methods","title":"Available Methods","text":"<p>Your new OAuth file/class has just one requirement. It must extend <code>Datamweb\\ShieldOAuth\\Libraries\\Basic\\AbstractOAuth</code>. The abstract class <code>AbstractOAuth</code> implement methods <code>makeGoLink($state)</code>, <code>fetchAccessTokenWithAuthCode($allGet)</code>, <code>fetchUserInfoWithToken()</code> and <code>setColumnsName(string $nameOfProcess, $userInfo)</code>, which should be built according to the documentation of each server.</p> <p>The <code>AbstractOAuth</code> defines four methods for your usage:</p> <ol> <li><code>makeGoLink($state)</code> In this method, you need to create a link to transfer the user to the new provider. The output of this method is a <code>string</code> in the form of URL. For example, regarding Yahoo, you can follow the instructions available here to create this link.</li> <li><code>fetchAccessTokenWithAuthCode($allGet)</code> In this method, you should try to get the value of <code>access_token</code> according to the code received from the previous method. The output of this method is of <code>void</code>. For Yahoo, you can see the description here. Everything is ready, just replace.</li> <li><code>fetchUserInfoWithToken()</code> In this method, you try to receive user information (including first name, last name, email, etc) according to the token code set in the previous step.The output of this method is a <code>object</code> of user info(email, name, ...). See here for more details about Yahoo.</li> <li><code>setColumnsName(string $nameOfProcess, $userInfo)</code> In this method, you set the fields received from each service OAuth to be recorded in each column of the table.</li> </ol>"},{"location":"add_other_oauth/#yahoooauth-example-class","title":"YahooOAuth Example Class","text":"<pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Libraries\\ShieldOAuth;\n\nuse CodeIgniter\\HTTP\\CURLRequest;\nuse Config\\Services;\nuse Datamweb\\ShieldOAuth\\Config\\ShieldOAuthConfig;\nuse Datamweb\\ShieldOAuth\\Libraries\\Basic\\AbstractOAuth;\nuse Exception;\n\nclass YahooOAuth extends AbstractOAuth\n{\n    // https://developer.yahoo.com/oauth2/guide/flows_authcode/#refresh-token-label\n    private static string $API_CODE_URL      = 'https://api.login.yahoo.com/oauth2/request_auth';\n    private static string $API_TOKEN_URL     = 'https://api.login.yahoo.com/oauth2/get_token';\n    private static string $API_USER_INFO_URL = 'https://api.login.yahoo.com/openid/v1/userinfo';\n    private static string $APPLICATION_NAME  = 'ShieldOAuth';\n\n    protected string $token;\n    protected CURLRequest $client;\n    protected ShieldOAuthConfig $config;\n    protected string $client_id;\n    protected string $client_secret;\n    protected string $callback_url;\n\n    public function __construct(string $token = '')\n    {\n        $this-&gt;token  = $token;\n        $this-&gt;client = Services::curlrequest();\n\n        $this-&gt;config        = config('ShieldOAuthConfig');\n        $this-&gt;callback_url  = base_url('oauth/' . $this-&gt;config-&gt;call_back_route);\n        $this-&gt;client_id     = env('ShieldOAuthConfig.yahoo.client_id', $this-&gt;config-&gt;oauthConfigs['yahoo']['client_id']);\n        $this-&gt;client_secret = env('ShieldOAuthConfig.yahoo.client_secret', $this-&gt;config-&gt;oauthConfigs['yahoo']['client_secret']);\n    }\n\n    public function makeGoLink(string $state): string\n    {\n        $yahooURL= self::$API_CODE_URL.\"?response_type=code&amp;client_id={$this-&gt;client_id}&amp;redirect_uri={$this-&gt;callback_url}&amp;state={$state}\";\n\n        return $yahooURL;\n    }\n\n    public function fetchAccessTokenWithAuthCode(array $allGet): void\n    {\n\n        $client = \\Config\\Services::curlrequest();\n        try {\n            //send request to API URL\n            $response = $client-&gt;request('POST', self::$API_TOKEN_URL, [\n                'form_params' =&gt; [\n                        'client_id'     =&gt; $this-&gt;client_id ,\n                        'client_secret' =&gt; $this-&gt;client_secret ,\n                        'redirect_uri'  =&gt; $this-&gt;callback_url,\n                        'code'          =&gt; $allGet['code'],\n                        'grant_type'    =&gt; 'authorization_code'\n                ],\n                'http_errors' =&gt; false,\n            ]);\n\n        } catch (Exception $e) {\n            die($e-&gt;getMessage());\n        }\n\n         $token = json_decode($response-&gt;getBody())-&gt;access_token;\n         $this-&gt;setToken($token);\n    }\n\n    protected function fetchUserInfoWithToken(): object\n    {\n        // send request to API URL\n        try {\n            $response = $this-&gt;client-&gt;request('GET', self::$API_USER_INFO_URL, [\n                'headers' =&gt; [\n                    'Authorization' =&gt; 'Bearer ' . $this-&gt;getToken(),\n                ],\n                'http_errors' =&gt; false,\n            ]);\n        } catch (Exception $e) {\n            die($e-&gt;getMessage());\n        }\n\n        return json_decode($response-&gt;getBody());\n    }\n\n    protected function setColumnsName(string $nameOfProcess, object $userInfo): array\n    {\n        if($nameOfProcess === 'syncingUserInfo'){\n            $usersColumnsName = [\n                $this-&gt;config-&gt;usersColumnsName['first_name'] =&gt; $userInfo-&gt;given_name,\n                $this-&gt;config-&gt;usersColumnsName['last_name']  =&gt; $userInfo-&gt;family_name,\n                $this-&gt;config-&gt;usersColumnsName['avatar']     =&gt; $userInfo-&gt;picture,\n            ];\n        }\n\n        if($nameOfProcess === 'newUser'){\n            $usersColumnsName = [\n                'username'                                    =&gt; $userInfo-&gt;nickname,\n                'email'                                       =&gt; $userInfo-&gt;email,\n                'password'                                    =&gt; random_string('crypto', 32),\n                'active'                                      =&gt; $userInfo-&gt;email_verified,\n                $this-&gt;config-&gt;usersColumnsName['first_name'] =&gt; $userInfo-&gt;given_name,\n                $this-&gt;config-&gt;usersColumnsName['last_name']  =&gt; $userInfo-&gt;family_name,\n                $this-&gt;config-&gt;usersColumnsName['avatar']     =&gt; $userInfo-&gt;picture,\n            ];\n        }\n\n        return $usersColumnsName;\n    }\n}\n</code></pre>"},{"location":"get_keys/","title":"How To Get Keys","text":"<p>Obviously, receiving Keys is not directly related to <code>Shield OAuth</code>, however, to improve the documentation and convenience of our users, Therefore, we have provided helpful links on how to get keys from the three most important Google, GitHub and Yahoo. For other services, you can find the relevant steps by searching.</p> <ul> <li>How To Get Keys</li> <li>Explanation About Callback</li> <li>Get GitHub Keys</li> <li>Get Google Keys</li> <li>Get Yahoo Keys</li> </ul>"},{"location":"get_keys/#explanation-about-callback","title":"Explanation About Callback","text":"<p>What is important in receiving the keys in each of the services is the Callback (Redirect) address. In this regard, you must register the address as below. <pre><code>https://yourBaseUrl.com/oauth/call-back\n</code></pre> <code>Shield OAuth</code> allows you to put another expression in the place of <code>call-back</code>, for this you need to make the necessary changes in the <code>app/Config/ShieldOAuthConfig.php</code> file.</p> <pre><code>public string $call_back_route = 'any-name-for-call-back';\n</code></pre> <p>Be careful that you must provide the same address for all services.</p> <pre><code>https://yourBaseUrl.com/oauth/any-name-for-call-back\n</code></pre>"},{"location":"get_keys/#get-github-keys","title":"Get GitHub Keys","text":"<p>The guide to get the <code>client_id</code> &amp; <code>client_secret</code> keys on GitHub is here in full.</p>"},{"location":"get_keys/#get-google-keys","title":"Get Google Keys","text":"<p>The guide to get the <code>client_id</code> &amp; <code>client_secret</code> keys on Google is here.</p>"},{"location":"get_keys/#get-yahoo-keys","title":"Get Yahoo Keys","text":"<p>The guide to get the <code>client_id</code> &amp; <code>client_secret</code> keys on Yahoo is here.</p>"},{"location":"install/","title":"Installation","text":"<ul> <li>Installation</li> <li>Requirements</li> <li>Composer Installation</li> <li>Add Required Columns</li> <li>Cancel Filter For Shield OAuth Routes</li> <li>Set keys</li> <li>Adding all login button with OAuth in View</li> </ul> <p>These instructions assume that you have already installed the CodeIgniter 4 app starter and Shield as the basis for your new project, set up your <code>.env</code> file, and created a database that you can access via the Spark CLI script.</p>"},{"location":"install/#requirements","title":"Requirements","text":"<ul> <li>Composer</li> <li>Codeigniter v4.3.5 or later</li> <li>Codeigniter Shield</li> <li>cURL Library to be installed in your version of PHP</li> </ul>"},{"location":"install/#composer-installation","title":"Composer Installation","text":"<p>Installation is done through Composer. The example assumes you have it installed globally. If you have it installed as a phar, or otherwise you will need to adjust the way you call composer itself.</p> <pre><code>composer require datamweb/shield-oauth:dev-develop\n</code></pre> <p>Note You can manually install <code>Shield OAuth</code> by extracting the project file to path <code>app\\ThirdParty\\shield-oauth</code> and then adding </p> <p><code>php      public $psr4 = [     // add this line     'Datamweb\\ShieldOAuth' =&gt; APPPATH . 'ThirdParty/shield-oauth/src', ];</code>  to the <code>app/Config/Autoload.php</code> file, however we do not recommend this. Please use the Composer.</p>"},{"location":"install/#add-required-columns","title":"Add Required Columns","text":"<p><code>Shield OAuth</code> needs to make some changes in Shield <code>users</code> Table. In general, you should have the following items in <code>users</code> Table.</p> <p><pre><code>Data of Table \"users\":\n\n+----+----------+--------+-...-+------------+-----------+--------+\n| id | username | status | ... | first_name | last_name | avatar |\n+----+----------+--------+-...-+------------+-----------+--------+\n</code></pre> Therefore, you can add <code>first_name</code>, <code>last_name</code>, and <code>avatar</code> columns to table <code>users</code> by any method you want or run the migrations:</p> <pre><code>php spark migrate -n Datamweb\\ShieldOAuth\n</code></pre> <p>Note By default, <code>Shield OAuth</code> uses columns named <code>first_name</code>, <code>last_name</code>, and <code>avatar</code>. For any reason, if you want to consider another name for them columns, you can do it through the config file(<code>config/ShieldOAuthConfig.php</code>) and set the desired values in:</p> <pre><code>public array $usersColumnsName = [\n    'first_name' =&gt; 'first_name',\n    'last_name'  =&gt; 'last_name',\n    'avatar'     =&gt; 'avatar',\n];\n</code></pre>"},{"location":"install/#cancel-filter-for-shield-oauth-routes","title":"Cancel Filter For Shield OAuth Routes","text":"<p><code>Shield OAuth</code> adds multiple routes to your project. <code>oauth/call-back</code> and <code>oauth/(:any)</code>, so you should register them in the category of not applying the shield filter. For this, you can proceed as follows you need to add the following code in the <code>app/Config/Filters.php</code> file.</p> <pre><code>public $globals = [\n    'before' =&gt; [\n        // ...\n        'session' =&gt; ['except' =&gt; ['login*', 'register', 'auth/a/*', 'oauth*']],\n    ],\n    // ...\n];\n</code></pre>"},{"location":"install/#set-keys","title":"Set keys","text":"<p>Receive keys <code>client_id</code> and <code>client_secret</code> from each OAuth server. To connect to any of the servers, you need to receive<code>client_id</code> and <code>client_secret</code> from them and then set them in file .env Or <code>app/Config/ShieldOAuthConfig</code>.</p> <p>We suggest that you set the keys of each service in file .env instead of using app/Config/ShieldOAuthConfig. For example, you can proceed as follows.</p> <pre><code>ShieldOAuthConfig.google.client_id = Your google client_id key\nShieldOAuthConfig.google.client_secret = Your google client_secret key\n</code></pre> <p>Note By default, there is no file <code>app/Config/ShieldOAuthConfig</code>. It is strongly recommended to set the keys to <code>app/Config/ShieldOAuthConfig</code>. This behavior will make sure that there will be no problems for the settings you have made in case of update <code>Shield OAuth</code>. To create it, you can use the following command:</p> <pre><code>php spark make:oauthconfig\n</code></pre> <p>You can see How To Get Keys for instructions on how to get the keys.</p> <pre><code>public array $oauthConfigs = [\n    'github' =&gt; [\n            'client_id'     =&gt; '8441sgsgsgsgshfgjgykgub08b6',\n            'client_secret' =&gt; '2336fsdgdfgdfgdfghfdhfghdhdhdhdhd',\n            // ...\n    ],\n    'google' =&gt; [\n            'client_id'     =&gt; '95040vghjhjghjgjgj.apps.googleusercontent.com',\n            'client_secret' =&gt; 'fsdfsdfsgdgrdg',\n        // ...\n    ],\n    // and other services...\n</code></pre>"},{"location":"install/#adding-all-login-button-with-oauth-in-view","title":"Adding all login button with OAuth in View","text":"<p>The last step is to, You can create your own buttons in views, what is important is that the addresses should be as follows: <pre><code>http://localhost:8080/oauth/google\nhttp://localhost:8080/oauth/github\nhttp://localhost:8080/oauth/yahoo\n&lt;!-- and other OAuth !&gt;\n</code></pre> However, <code>Shield OAuth</code> suggests the following for ease of use. By adding the following commands to the <code>vendor/codeigniter4/shield/src/Views/login.php</code> and <code>vendor/codeigniter4/shield/src/Views/register.php</code> file, <code>Shield OAuth</code> will automatically display all the OAuth you provide as buttons in login/register views.</p> <pre><code>{{ShieldOAuthButtonForLoginPage}}\n</code></pre> <p><pre><code>{{ShieldOAuthButtonForRegisterPage}}\n</code></pre> Because we have used Bootstrap to make the dropdown button, you need to add the following items at the end of the views file.</p> <pre><code>&lt;?= $this-&gt;section('pageScripts') ?&gt;\n&lt;script src='https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js' integrity='sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3' crossorigin='anonymous'&gt;&lt;/script&gt;\n&lt;script src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.min.js' integrity='sha384-IDwe1+LCz02ROU9k972gdyvl+AESN10+x7tBKgc9I5HFtuNz0wWnPclzo6p9vxnk' crossorigin='anonymous'&gt;&lt;/script&gt;\n&lt;?= $this-&gt;endSection() ?&gt;\n</code></pre> <p>Note When you create a new class in path <code>app/Libraries/ShieldOAuth/</code>, for example <code>YahooOAuth.php</code>, you will have a new link as below, this is done automatically and there is no need to add code and perform special instructions.</p> <pre><code>http://localhost:8080/oauth/yahoo\n</code></pre> <p>Warning The two views <code>vendor/codeigniter4/shield/src/Views/login.php</code> and <code>vendor/codeigniter4/shield/src/Views/register.php</code> are the main files of <code>Shield</code>, we have included them in order to make the documentation understandable, you should definitely use custom views.</p>"},{"location":"quickstart/","title":"Quick Installation","text":"<p>It is strongly recommended that only people who have already read the documents in full should use this section. The purpose of providing this section is to save the time of people and developers who frequently use <code>Shield OAuth</code> in different projects.</p>"},{"location":"quickstart/#step-1","title":"Step 1 :","text":"<p>Installing the package by Composer : <pre><code>composer require datamweb/shield-oauth:dev-develop\n</code></pre></p>"},{"location":"quickstart/#step-2","title":"Step 2 :","text":"<p>Add <code>first_name</code>, <code>last_name</code>, and <code>avatar</code> columns to table <code>users</code> :</p> <pre><code>php spark migrate -n Datamweb\\ShieldOAuth\n</code></pre>"},{"location":"quickstart/#step-3","title":"Step 3 :","text":"<ul> <li>Add <code>{{ShieldOAuthButtonForLoginPage}}</code> to <code>vendor\\codeigniter4\\shield\\src\\Views\\login.php</code></li> <li>Add <code>{{ShieldOAuthButtonForRegisterPage}}</code> to <code>vendor\\codeigniter4\\shield\\src\\Views\\register.php</code></li> <li>Add <pre><code>&lt;?= $this-&gt;section('pageScripts') ?&gt;\n&lt;script src='https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js' integrity='sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3' crossorigin='anonymous'&gt;&lt;/script&gt;\n&lt;script src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.min.js' integrity='sha384-IDwe1+LCz02ROU9k972gdyvl+AESN10+x7tBKgc9I5HFtuNz0wWnPclzo6p9vxnk' crossorigin='anonymous'&gt;&lt;/script&gt;\n&lt;?= $this-&gt;endSection() ?&gt;\n</code></pre>  to <code>vendor\\codeigniter4\\shield\\src\\Views\\login.php</code> and <code>vendor\\codeigniter4\\shield\\src\\Views\\register.php</code>.</li> </ul>"},{"location":"quickstart/#step-4","title":"Step 4 :","text":"<p>Receive keys <code>client_id</code> and <code>client_secret</code> from each OAuth server. and setting them in file <code>app\\Config\\ShieldOAuthConfig.php</code>.</p> <p>callBack address is <code>https://yourBaseURL.com/oauth/call-back</code>. <pre><code>public array $oauthConfigs = [\n    'github' =&gt; [\n            'client_id'     =&gt; '8441sgsgsgsgshfgjgykgub08b6',\n            'client_secret' =&gt; '2336fsdgdfgdfgdfghfdhfghdhdhdhdhd',\n            // ...\n    ],\n    'google' =&gt; [\n            'client_id'     =&gt; '95040vghjhjghjgjgj.apps.googleusercontent.com',\n            'client_secret' =&gt; 'fsdfsdfsgdgrdg',\n        // ...\n    ],\n    // and other services...\n</code></pre></p> <p>Note By default, there is no file <code>app/Config/ShieldOAuthConfig.php</code>. It is strongly recommended to set the keys to <code>app/Config/ShieldOAuthConfig.php</code>. This behavior will make sure that there will be no problems for the settings you have made in case of update <code>Shield OAuth</code>. To create it, you can use the following command:</p> <pre><code>php spark make:oauthconfig\n</code></pre>"},{"location":"quickstart/#step-5","title":"Step 5 :","text":"<p>Cancel filter for <code>Shield OAuth</code> routes. <pre><code>public $globals = [\n    'before' =&gt; [\n        // ...\n        'session' =&gt; ['except' =&gt; ['login*', 'register', 'auth/a/*', 'oauth*']],\n    ],\n    // ...\n];\n</code></pre></p>"},{"location":"quickstart/#step-6","title":"Step 6 :","text":"<p>See <code>https://yourBaseURL.com/login</code> Or <code>https://yourBaseURL.com/register</code> Use and enjoy!</p>"}]}